#include <iostream>
#include <queue>
#include <unordered_map>

using namespace std;

// Node structure for Huffman Tree
struct Node {
    char ch;
    int freq;
    Node *left, *right;

    Node(char c, int f) : ch(c), freq(f), left(NULL), right(NULL) {}
};

// Comparator for priority queue (min heap)
struct Compare {
    bool operator()(Node* a, Node* b) {
        return a->freq > b->freq;
    }
};

// Function to generate Huffman codes and store them in a map
void generateCodes(Node* root, string code, unordered_map<char, string> &huffmanCode) {
    if (!root) return;

    if (root->ch != '\0') {
        huffmanCode[root->ch] = code;
    }

    generateCodes(root->left, code + "0", huffmanCode);
    generateCodes(root->right, code + "1", huffmanCode);
}

// Function to decode a Huffman-encoded string
string decodeHuffman(Node* root, string encodedStr) {
    string decodedStr = "";
    Node* current = root;

    for (char bit : encodedStr) {
        current = (bit == '0') ? current->left : current->right;

        if (!current->left && !current->right) {
            decodedStr += current->ch;
            current = root;
        }
    }
    return decodedStr;
}

// Huffman Encoding Function
void huffmanCoding(string text) {
    unordered_map<char, int> freqMap;
    for (char ch : text) freqMap[ch]++;

    priority_queue<Node*, vector<Node*>, Compare> pq;
    for (auto it : freqMap) pq.push(new Node(it.first, it.second));

    while (pq.size() > 1) {
        Node *left = pq.top(); pq.pop();
        Node *right = pq.top(); pq.pop();
        Node *newNode = new Node('\0', left->freq + right->freq);
        newNode->left = left;
        newNode->right = right;
        pq.push(newNode);
    }

    Node* root = pq.top();

    unordered_map<char, string> huffmanCode;
    generateCodes(root, "", huffmanCode);

    cout << "Huffman Codes:\n";
    for (auto pair : huffmanCode) {
        cout << pair.first << " : " << pair.second << endl;
    }

    // Encode the input text
    string encodedStr = "";
    for (char ch : text) encodedStr += huffmanCode[ch];

    cout << "\nEncoded String: " << encodedStr << endl;

    // Decode the Huffman-encoded string
    string decodedStr = decodeHuffman(root, encodedStr);
    cout << "Decoded String: " << decodedStr << endl;
}

int main() {
    string text = "hello world";
    huffmanCoding(text);
    return 0;
}
