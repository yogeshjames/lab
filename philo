#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5  // Number of philosophers

sem_t forks[N];  // Semaphore for forks
pthread_mutex_t mutex; // Mutex for output synchronization

void *philosopher(void *num) {
    int id = *(int *)num;

    while (1) {
        printf("Philosopher %d is thinking...\n", id);
        sleep(1);

        sem_wait(&forks[id]);          
        sem_wait(&forks[(id + 1) % N]);

        pthread_mutex_lock(&mutex);
        printf("Philosopher %d is eating...\n", id);
        pthread_mutex_unlock(&mutex);
        sleep(2);

        sem_post(&forks[id]);         
        sem_post(&forks[(id + 1) % N]);
    }
    return NULL;
}

int main() {
    pthread_t philosophers[N];
    int ids[N];

    pthread_mutex_init(&mutex, NULL);
    for (int i = 0; i < N; i++) sem_init(&forks[i], 0, 1);

    for (int i = 0; i < N; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    for (int i = 0; i < N; i++) pthread_join(philosophers[i], NULL);

    for (int i = 0; i < N; i++) sem_destroy(&forks[i]);
    pthread_mutex_destroy(&mutex);

    return 0;
}
