#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>

using namespace std;

// Function to implement FIFO Page Replacement Algorithm
void FIFO(vector<int> pages, int capacity) {
    queue<int> pageQueue;
    unordered_map<int, bool> pageMap;
    int pageFaults = 0;

    for (int page : pages) {
        if (pageMap.find(page) == pageMap.end()) {
            if (pageQueue.size() == capacity) {
                int removed = pageQueue.front();
                pageQueue.pop();
                pageMap.erase(removed);
            }
            pageQueue.push(page);
            pageMap[page] = true;
            pageFaults++;
        }
    }
    cout << "FIFO Page Faults: " << pageFaults << endl;
}

// Function to implement LRU Page Replacement Algorithm
void LRU(vector<int> pages, int capacity) {
    unordered_map<int, int> pageMap;
    int pageFaults = 0, time = 0;

    for (int page : pages) {
        if (pageMap.find(page) == pageMap.end()) {
            if (pageMap.size() == capacity) {
                int lruPage = -1, lruTime = INT_MAX;
                for (auto it : pageMap) {
                    if (it.second < lruTime) {
                        lruTime = it.second;
                        lruPage = it.first;
                    }
                }
                pageMap.erase(lruPage);
            }
            pageFaults++;
        }
        pageMap[page] = time++;
    }
    cout << "LRU Page Faults: " << pageFaults << endl;
}

// Function to implement Optimal Page Replacement Algorithm
void Optimal(vector<int> pages, int capacity) {
    vector<int> memory;
    int pageFaults = 0;

    for (int i = 0; i < pages.size(); i++) {
        auto it = find(memory.begin(), memory.end(), pages[i]);
        if (it == memory.end()) {
            if (memory.size() == capacity) {
                int farthest = -1, index;
                for (int j = 0; j < memory.size(); j++) {
                    int k;
                    for (k = i + 1; k < pages.size(); k++) {
                        if (memory[j] == pages[k]) {
                            if (k > farthest) {
                                farthest = k;
                                index = j;
                            }
                            break;
                        }
                    }
                    if (k == pages.size()) {
                        index = j;
                        break;
                    }
                }
                memory[index] = pages[i];
            } else {
                memory.push_back(pages[i]);
            }
            pageFaults++;
        }
    }
    cout << "Optimal Page Faults: " << pageFaults << endl;
}

int main() {
    vector<int> pages = {7, 0, 1, 2, 0, 3, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1};
    int capacity = 3;
    
    FIFO(pages, capacity);
    LRU(pages, capacity);
    Optimal(pages, capacity);
    
    return 0;
}
