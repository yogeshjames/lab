#include <stdio.h>

#define P 5  // Number of processes
#define R 3  // Number of resources

int available[R] = {3, 3, 2};  // Available resources
int max[P][R] = {  // Maximum demand of each process
    {7, 5, 3},
    {3, 2, 2},
    {9, 0, 2},
    {2, 2, 2},
    {4, 3, 3}
};
int allocation[P][R] = {  // Resources currently allocated
    {0, 1, 0},
    {2, 0, 0},
    {3, 0, 2},
    {2, 1, 1},
    {0, 0, 2}
};
int need[P][R];  // Resources still needed

// Function to check if a request can be granted
int isSafe() {
    int work[R], finish[P] = {0}, safeSeq[P];
    for (int i = 0; i < R; i++) work[i] = available[i];

    int count = 0;
    while (count < P) {
        int found = 0;
        for (int i = 0; i < P; i++) {
            if (!finish[i]) {
                int j;
                for (j = 0; j < R; j++) {
                    if (need[i][j] > work[j]) break;
                }
                if (j == R) {  
                    for (int k = 0; k < R; k++) work[k] += allocation[i][k];
                    safeSeq[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        if (!found) return 0;  // Deadlock detected
    }

    printf("Safe sequence: ");
    for (int i = 0; i < P; i++) printf("%d ", safeSeq[i]);
    printf("\n");
    return 1;
}

int main() {
    for (int i = 0; i < P; i++)
        for (int j = 0; j < R; j++)
            need[i][j] = max[i][j] - allocation[i][j];

    if (!isSafe())
        printf("System is in an unsafe state.\n");
    else
        printf("System is in a safe state.\n");
    
    return 0;
}
