#include <bits/stdc++.h>
using namespace std;

struct Job {
    int start, end, weight;
};

bool compare(Job a, Job b) {
    return a.end < b.end;
}

int binarySearch(vector<Job>& jobs, int index) {
    int low = 0, high = index - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (jobs[mid].end <= jobs[index].start) {
            if (jobs[mid + 1].end <= jobs[index].start)
                low = mid + 1;
            else
                return mid;
        } else {
            high = mid - 1;
        }
    }
    return -1;
}

int weightedIntervalScheduling(vector<Job>& jobs) {
    sort(jobs.begin(), jobs.end(), compare);
    int n = jobs.size();
    vector<int> dp(n, 0);
    dp[0] = jobs[0].weight;

    for (int i = 1; i < n; i++) {
        int inclProfit = jobs[i].weight;
        int l = binarySearch(jobs, i);
        if (l != -1)
            inclProfit += dp[l];

        dp[i] = max(inclProfit, dp[i-1]);
    }
    return dp[n-1];
}

int main() {
    vector<Job> jobs = {{1, 3, 5}, {2, 5, 6}, {4, 6, 5}, {6, 7, 4}, {5, 8, 11}, {7, 9, 2}};
    cout << "Maximum weight: " << weightedIntervalScheduling(jobs) << endl;
    return 0;
}
