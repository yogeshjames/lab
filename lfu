#include <stdio.h>

#define MAX_FRAMES 3
#define MAX_PAGES 100

void lfu(int pages[], int n) {
    int frames[MAX_FRAMES] = {-1, -1, -1}, freq[MAX_PAGES] = {0}, pageFaults = 0;

    for (int i = 0; i < n; i++) {
        int page = pages[i], found = 0, minFreq = MAX_PAGES, lfuIndex = 0;

        // Check if page is already in frames
        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == page) {
                found = 1;
                freq[page]++;
                break;
            }
        }

        // If page is not found, replace LFU page
        if (!found) {
            if (i < MAX_FRAMES) {
                frames[i] = page;
            } else {
                // Find least frequently used page
                for (int j = 0; j < MAX_FRAMES; j++) {
                    if (freq[frames[j]] < minFreq) {
                        minFreq = freq[frames[j]];
                        lfuIndex = j;
                    }
                }
                freq[frames[lfuIndex]] = 0; // Reset frequency of replaced page
                frames[lfuIndex] = page;
            }
            freq[page]++;
            pageFaults++;
        }

        // Print current frame state
        printf("Step %d: ", i + 1);
        for (int j = 0; j < MAX_FRAMES; j++) printf("%d ", frames[j]);
        printf("\n");
    }

    printf("Total Page Faults (LFU): %d\n", pageFaults);
}

int main() {
    int pages[] = {1, 3, 0, 3, 5, 6, 3}, n = 7;
    lfu(pages, n);
    return 0;
}
